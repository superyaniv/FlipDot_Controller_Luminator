#import FlipDot_Controller_Class
import RPi.GPIO as GPIO
import time
 
#----Set up controller to understand PCB design and Microcontroller layout----#
alphabet = [[0x00,0x00,0x00,0x00,0x00],[0x00,0x00,0x6f,0x00,0x00],[0x00,0x07,0x00,0x07,0x00],[0x14,0x7f,0x14,0x7f,0x14],[0x00,0x07,0x04,0x1e,0x00],[0x23,0x13,0x08,0x64,0x62],[0x36,0x49,0x56,0x20,0x50],[0x00,0x00,0x07,0x00,0x00],[0x00,0x1c,0x22,0x41,0x00],[0x00,0x41,0x22,0x1c,0x00],[0x14,0x08,0x3e,0x08,0x14],[0x08,0x08,0x3e,0x08,0x08],[0x00,0x50,0x30,0x00,0x00],[0x08,0x08,0x08,0x08,0x08],[0x00,0x60,0x60,0x00,0x00],[0x20,0x10,0x08,0x04,0x02],[0x3e,0x51,0x49,0x45,0x3e],[0x00,0x42,0x7f,0x40,0x00],[0x42,0x61,0x51,0x49,0x46],[0x21,0x41,0x45,0x4b,0x31],[0x18,0x14,0x12,0x7f,0x10],[0x27,0x45,0x45,0x45,0x39],[0x3c,0x4a,0x49,0x49,0x30],[0x01,0x71,0x09,0x05,0x03],[0x36,0x49,0x49,0x49,0x36],[0x06,0x49,0x49,0x29,0x1e],[0x00,0x36,0x36,0x00,0x00],[0x00,0x56,0x36,0x00,0x00],[0x08,0x14,0x22,0x41,0x00],[0x14,0x14,0x14,0x14,0x14],[0x00,0x41,0x22,0x14,0x08],[0x02,0x01,0x51,0x09,0x06],[0x3e,0x41,0x5d,0x49,0x4e],[0x7e,0x09,0x09,0x09,0x7e],[0x7f,0x49,0x49,0x49,0x36],[0x3e,0x41,0x41,0x41,0x22],[0x7f,0x41,0x41,0x41,0x3e],[0x7f,0x49,0x49,0x49,0x41],[0x7f,0x09,0x09,0x09,0x01],[0x3e,0x41,0x49,0x49,0x7a],[0x7f,0x08,0x08,0x08,0x7f],[0x00,0x41,0x7f,0x41,0x00],[0x20,0x40,0x41,0x3f,0x01],[0x7f,0x08,0x14,0x22,0x41],[0x7f,0x40,0x40,0x40,0x40],[0x7f,0x02,0x0c,0x02,0x7f],[0x7f,0x04,0x08,0x10,0x7f],[0x3e,0x41,0x41,0x41,0x3e],[0x7f,0x09,0x09,0x09,0x06],[0x3e,0x41,0x51,0x21,0x5e],[0x7f,0x09,0x19,0x29,0x46],[0x46,0x49,0x49,0x49,0x31],[0x01,0x01,0x7f,0x01,0x01],[0x3f,0x40,0x40,0x40,0x3f],[0x0f,0x30,0x40,0x30,0x0f],[0x3f,0x40,0x30,0x40,0x3f],[0x63,0x14,0x08,0x14,0x63],[0x07,0x08,0x70,0x08,0x07],[0x61,0x51,0x49,0x45,0x43],[0x3c,0x4a,0x49,0x29,0x1e],[0x02,0x04,0x08,0x10,0x20],[0x00,0x41,0x7f,0x00,0x00],[0x04,0x02,0x01,0x02,0x04],[0x40,0x40,0x40,0x40,0x40],[0x00,0x00,0x03,0x04,0x00],[0x20,0x54,0x54,0x54,0x78],[0x7f,0x48,0x44,0x44,0x38],[0x38,0x44,0x44,0x44,0x20],[0x38,0x44,0x44,0x48,0x7f],[0x38,0x54,0x54,0x54,0x18],[0x08,0x7e,0x09,0x01,0x02],[0x0c,0x52,0x52,0x52,0x3e],[0x7f,0x08,0x04,0x04,0x78],[0x00,0x44,0x7d,0x40,0x00],[0x20,0x40,0x44,0x3d,0x00],[0x00,0x7f,0x10,0x28,0x44],[0x00,0x41,0x7f,0x40,0x00],[0x7c,0x04,0x18,0x04,0x78],[0x7c,0x08,0x04,0x04,0x78],[0x38,0x44,0x44,0x44,0x38],[0x7c,0x14,0x14,0x14,0x08],[0x08,0x14,0x14,0x18,0x7c],[0x7c,0x08,0x04,0x04,0x08],[0x48,0x54,0x54,0x54,0x20],[0x04,0x3f,0x44,0x40,0x20],[0x3c,0x40,0x40,0x20,0x7c],[0x1c,0x20,0x40,0x20,0x1c],[0x3c,0x40,0x30,0x40,0x3c],[0x44,0x28,0x10,0x28,0x44],[0x0c,0x50,0x50,0x50,0x3c],[0x44,0x64,0x54,0x4c,0x44],[0x00,0x08,0x36,0x41,0x41],[0x00,0x00,0x7f,0x00,0x00],[0x41,0x41,0x36,0x08,0x00],[0x04,0x02,0x04,0x08,0x04]]
offRows=[5,7,3,2,1,4,6]
onRows=[44,47,42,40,46,41,43]
offColumns = [74,48,73,49,50, 72,71,51,70,52, 53,69,54,68,55, 67,56,66,57,58, 59,65,60,64,61]
onColumns = [38,8,39,15,14, 32,25,13,26,12, 11,27,10,28,9, 29,16,30,23,22, 21,31,20,24,19]

numOfRegisterPins = 8*10
registers = [0] * numOfRegisterPins
ser_Pin = 18
rclk_Pin = 23
srclk_Pin = 24
#GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(ser_Pin,GPIO.OUT)
GPIO.setup(rclk_Pin,GPIO.OUT)
GPIO.setup(srclk_Pin,GPIO.OUT)

#FlipDot_Controller = FlipDot_Controller_Class.FlipDot_Controller_Class(1, onRows, offRows, onColumns, offColumns, numOfRegisterPins, ser_Pin, rclk_Pin, srclk_Pin) 

def displayCounter():
    FlipDot_Controller.allDots(1)
    FlipDot_Controller.allDots(0)
    t = 0
    try:
        print("Press Ctrl+C to Stop Test.")
        while True:
            t=t+1
            FlipDot_Controller.updateDisplay(str(t)[:5])
    except KeyboardInterrupt:
        FlipDot_Controller.deInitialize
        pass

def writeRegisters():
    GPIO.output(rclk_Pin,0)
    for i in range(numOfRegisterPins-1,0,-1):
        GPIO.output(srclk_Pin,0)
        val = registers[i]
        GPIO.output(ser_Pin,val)
        GPIO.output(srclk_Pin,1)
        GPIO.output(rclk_Pin,1)
def clearRegisters():
    for i in range(numOfRegisterPins-1,0,-1):
        registers[i] = 0
        writeRegisters()
try:
    delay=.2
    for x in range(100):
        for c in range(25):
#                registers[onRows[r]]=1
            for r in range(7):
                registers[onRows[r]]=1
            registers[onColumns[c]]=1
            writeRegisters()
            time.sleep(delay)
            clearRegisters()
            time.sleep(delay)
            print(r,c)
        for c in range(25):
            for r in range(7):
                registers[offRows[r]]=1
            registers[offColumns[c]]=1
            writeRegisters()
            time.sleep(delay)
            clearRegisters()


except KeyboardInterrupt:
    clearRegisters()
    GPIO.cleanup
    pass

